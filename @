import math
import matplotlib.pylab as plt
import numpy as np
from mpmath import nsum, exp, inf
from collections import OrderedDict
from scipy.optimize import fsolve
#Global Variables
nm = 1e-9
k= 1.3806488*10**-23
e = 1.60217657*10**-19
h=6.62606957e-34
me=9.11e-31
h_=h/(2*np.pi)
AA=1e-10
Tc=10.1
Delta=2*k*Tc
Rsh=280
d=8*nm
w=250*nm
S=w*d
rho0=Rsh*d
N0DFT=0.9/(e*21*AA**3)
k_F=np.pi/(4*AA)
v_F=h_*k_F/me
n=(2./3)*N0DFT*v_F**2*me
k_F=(3*np.pi**2*n)**(1./3)
v_F=h_*k_F/me
E_F=h_**2*k_F**2/(2*me)
b=3*me/(2*e**2*N0DFT*h_*rho0)
Q=(-b+np.sqrt(b**2+4))/2
l=1/(k_F*Q)
G=h_*v_F/l
N0Q=N0DFT*(1-Q**2)
DQ=v_F*1/(3*k_F*Q)
####
Zeta_3 = 1.202 # constant from article
# Parametrs. We will solve normilized equation (22-24 in the article).
# Critical temperatur in [K]
T1= 1
T2 =Tc
T = np.linspace(T1,T2,100) # We build I(T) on [T1,T2] segment
t = T / Tc # Normilized temperature
Delta_zero = 2*k*Tc#  absolute value of ordering parametr in T=0 and without current  ???
tau =  l / v_F # mean free path time
tau_prime = tau * (math.pi)*T
u = 1 # velocity of condesate for pure superconductor ????
u_prime = (v_F*u) / ((math.pi)*T)
N0 =N0Q # Density of state on Fermy surface ???????
#At first let's build Igl(T) which for current  in range of temperatures closed to Tc. We will need this dependece to plot I(T) for arbitary temperatures #
rho = 1 / (2*tau*(math.pi)*Tc)
Hi = (8 / (7*Zeta_3))*nsum(lambda n: ((2*n+1)**(-0.5))*((2*n + 1 + rho)**(-1)), [0, inf]) 
Igl = (16 / (9*(7*Zeta_3)**(0.5))) * (Hi**(0.5)) * e * N0 * v_F * (math.pi)*Tc*((1 - T/Tc)**(3/2)) # Formula 13 article
plt.plot(T, Igl)
plt.show()`
#We will solve equation for I_prime, I = I_prime / Igl #
'''
The plan is following, we can solve first  equation in system 22 with respect to X, then after we will find Z and Y and plug to equation for t.  
'''
Delta_zero_prime = Delta_zero / Tc
Delta_prime = Delta_zero_prime / 6 
def X_finding(var):
    x = var
    eq = Delta_prime*(1 -  (1 / (tau_prime[99]*u_prime[99]))*math.atan( (u_prime[99] / 2) / ( 1 / x + 1 / (2*tau_prime[99])) ) ) -( (  (1-x**2) *  ( 1  +(4*(1 / x + 1 / (2*tau_prime[99]) )**2) / ((u_prime[99])**2)       )  )**(0.5))*(1/x + 1 / (2*tau_prime[99]))
    return eq
x =  fsolve(X_finding, 1)
print(x)
print(X_finding(1))

